(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var ChecktypeError = require('checktype').ChecktypeError;

var Filter = require('kurento-client').register.abstracts.Filter;

/**
 * Create a {@link module:crowddetector.CrowdDetectorFilter CrowdDetectorFilter}
 *
 * @classdesc
 *  Filter that detects people agglomeration in video streams
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:crowddetector.CrowdDetectorFilter
 *
 * @param {external:String} id
 *
 * @fires {@link module:crowddetector#event:CrowdDetectorDirection CrowdDetectorDirection}
 * @fires {@link module:crowddetector#event:CrowdDetectorFluidity CrowdDetectorFluidity}
 * @fires {@link module:crowddetector#event:CrowdDetectorOccupancy CrowdDetectorOccupancy}
 */
function CrowdDetectorFilter(id){
  CrowdDetectorFilter.super_.call(this, id);
};
inherits(CrowdDetectorFilter, Filter);

/**
 * @alias module:crowddetector.CrowdDetectorFilter.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter belongs
 *
 * @property {module:crowddetector/complexTypes.RegionOfInterest} rois
 *  Regions of interest for the filter
 */
CrowdDetectorFilter.constructorParams = {
  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },

  rois: {
    type: 'RegionOfInterest',
    isList: true,
    required: true
  },
};

/**
 * @alias module:crowddetector.CrowdDetectorFilter.events
 *
 * @extend module:core/abstracts.Filter.events
 */
CrowdDetectorFilter.events = Filter.events.concat(['CrowdDetectorDirection', 'CrowdDetectorFluidity', 'CrowdDetectorOccupancy']);

module.exports = CrowdDetectorFilter;

CrowdDetectorFilter.check = function(key, value)
{
  if(!(value instanceof CrowdDetectorFilter))
    throw ChecktypeError(key, CrowdDetectorFilter, value);
};

},{"checktype":7,"inherits":8}],2:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var checkType = require('checktype');

/**
 * Checker for {@link crowddetector/complexTypes.RegionOfInterest}
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:crowddetector/complexTypes.RegionOfInterest} value
 */
function checkRegionOfInterest(key, value)
{
  checkType('RelativePoint', key+'.points', value.points, true);
  checkType('RegionOfInterestConfig', key+'.regionOfInterestConfig', value.regionOfInterestConfig, true);
  checkType('String', key+'.id', value.id, true);
};


/**
 * Region of interest for some events in a video processing filter
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @typedef crowddetector/complexTypes.RegionOfInterest
 *
 * @type {Object}
 * @property {module:crowddetector/complexTypes.RelativePoint} points
 *  list of points delimiting the region of interest
 * @property {module:crowddetector/complexTypes.RegionOfInterestConfig} regionOfInterestConfig
 *  data structure for configuration of CrowdDetector regions of interest
 * @property {external:String} id
 *  identifier of the region of interest. The string used for the id must begin 
 *   with a letter followed by an alphanumeric character included (/-_.:+)
 */


module.exports = checkRegionOfInterest;

},{"checktype":7}],3:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var checkType = require('checktype');

/**
 * Checker for {@link crowddetector/complexTypes.RegionOfInterestConfig}
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:crowddetector/complexTypes.RegionOfInterestConfig} value
 */
function checkRegionOfInterestConfig(key, value)
{
  checkType('int', key+'.occupancyLevelMin', value.occupancyLevelMin);
  checkType('int', key+'.occupancyLevelMed', value.occupancyLevelMed);
  checkType('int', key+'.occupancyLevelMax', value.occupancyLevelMax);
  checkType('int', key+'.occupancyNumFramesToEvent', value.occupancyNumFramesToEvent);
  checkType('int', key+'.fluidityLevelMin', value.fluidityLevelMin);
  checkType('int', key+'.fluidityLevelMed', value.fluidityLevelMed);
  checkType('int', key+'.fluidityLevelMax', value.fluidityLevelMax);
  checkType('int', key+'.fluidityNumFramesToEvent', value.fluidityNumFramesToEvent);
  checkType('boolean', key+'.sendOpticalFlowEvent', value.sendOpticalFlowEvent);
  checkType('int', key+'.opticalFlowNumFramesToEvent', value.opticalFlowNumFramesToEvent);
  checkType('int', key+'.opticalFlowNumFramesToReset', value.opticalFlowNumFramesToReset);
  checkType('int', key+'.opticalFlowAngleOffset', value.opticalFlowAngleOffset);
};


/**
 * data structure for configuration of CrowdDetector regions of interest
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @typedef crowddetector/complexTypes.RegionOfInterestConfig
 *
 * @type {Object}
 * @property {external:Integer} occupancyLevelMin
 *  minimun occupancy percentage in the ROI to send occupancy events
 * @property {external:Integer} occupancyLevelMed
 *  send occupancy level = 1 if the occupancy percentage is between occupancy_level_min and this level
 * @property {external:Integer} occupancyLevelMax
 *  send occupancy level = 2 if the occupancy percentage is between occupancy_level_med and this level,
 *  and send occupancy level = 3 if the occupancy percentage is between this level and 100
 * @property {external:Integer} occupancyNumFramesToEvent
 *  number of consecutive frames that a new occupancy level has to be detected to recognize it as a occupancy level change.
 *  A new occupancy event will be send
 * @property {external:Integer} fluidityLevelMin
 *  minimun fluidity percentage in the ROI to send fluidity events
 * @property {external:Integer} fluidityLevelMed
 *  send fluidity level = 1 if the fluidity percentage is between fluidity_level_min and this level
 * @property {external:Integer} fluidityLevelMax
 *  send fluidity level = 2 if the fluidity percentage is between fluidity_level_med and this level,
 *   and send fluidity level = 3 if the fluidity percentage is between this level and 100
 * @property {external:Integer} fluidityNumFramesToEvent
 *  number of consecutive frames that a new fluidity level has to be detected to recognize it as a fluidity level change.
 *   A new fluidity event will be send
 * @property {external:Boolean} sendOpticalFlowEvent
 *  Enable/disable the movement direction detection into the ROI
 * @property {external:Integer} opticalFlowNumFramesToEvent
 *  number of consecutive frames that a new direction of movement has to be detected to recognize a new movement direction. 
 *   A new direction event will be send
 * @property {external:Integer} opticalFlowNumFramesToReset
 *  number of consecutive frames in order to reset the counter of repeated directions
 * @property {external:Integer} opticalFlowAngleOffset
 *  Direction of the movement. The angle could have four different values: 
 *   left (0), up (90), right (180) and down (270). This cartesian axis could be rotated adding an angle offset
 */


module.exports = checkRegionOfInterestConfig;

},{"checktype":7}],4:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var checkType = require('checktype');

/**
 * Checker for {@link crowddetector/complexTypes.RelativePoint}
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:crowddetector/complexTypes.RelativePoint} value
 */
function checkRelativePoint(key, value)
{
  checkType('float', key+'.x', value.x, true);
  checkType('float', key+'.y', value.y, true);
};


/**
 * Relative points in a physical screen, values are a percentage relative to the image dimensions. X left to right and Y top to down.
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @typedef crowddetector/complexTypes.RelativePoint
 *
 * @type {Object}
 * @property {external:Number} x
 *  Percentage relative to the image width to calculate the X coordinate of the point [0..1]
 * @property {external:Number} y
 *  Percentage relative to the image height to calculate the Y coordinate of the point [0..1]
 */


module.exports = checkRelativePoint;

},{"checktype":7}],5:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

/**
 * Media API for the Kurento Web SDK
 *
 * @module crowddetector/complexTypes
 *
 * @copyright 2013-2014 Kurento (http://kurento.org/)
 * @license LGPL
 */

var RegionOfInterest = require('./RegionOfInterest');
var RegionOfInterestConfig = require('./RegionOfInterestConfig');
var RelativePoint = require('./RelativePoint');


exports.RegionOfInterest = RegionOfInterest;
exports.RegionOfInterestConfig = RegionOfInterestConfig;
exports.RelativePoint = RelativePoint;

},{"./RegionOfInterest":2,"./RegionOfInterestConfig":3,"./RelativePoint":4}],6:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

/**
 * Media API for the Kurento Web SDK
 *
 * @module crowddetector
 *
 * @copyright 2013-2014 Kurento (http://kurento.org/)
 * @license LGPL
 */

var CrowdDetectorFilter = require('./CrowdDetectorFilter');


exports.CrowdDetectorFilter = CrowdDetectorFilter;

exports.complexTypes = require('./complexTypes');

},{"./CrowdDetectorFilter":1,"./complexTypes":5}],7:[function(require,module,exports){
/*
 * (C) Copyright 2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */


/**
 * Number.isInteger() polyfill
 * @function external:Number#isInteger
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger Number.isInteger}
 */
if (!Number.isInteger) {
  Number.isInteger = function isInteger (nVal) {
    return typeof nVal === "number" && isFinite(nVal)
        && nVal > -9007199254740992 && nVal < 9007199254740992
        && Math.floor(nVal) === nVal;
  };
}


function ChecktypeError(key, type, object)
{
  return SyntaxError(key + ' param should be a ' + (type.name || type)
                    + ', not ' + value.constructor.name);
}


//
// Basic types
//

function checkArray(type, key, value)
{
  if(!(value instanceof Array))
    throw ChecktypeError(key, 'Array of '+type, value);

  for(var i=0, item; item=value[i]; i++)
    checkType(type, key+'['+i+']', item);
};

function checkBoolean(key, value)
{
  if(typeof value != 'boolean')
    throw ChecktypeError(key, Boolean, value);
};

function checkNumber(key, value)
{
  if(typeof value != 'number')
    throw ChecktypeError(key, Number, value);
};

function checkInteger(key, value)
{
  if(!Number.isInteger(value))
    throw ChecktypeError(key, 'Integer', value);
};

function checkObject(key, value)
{
  if(typeof value != 'object')
    throw ChecktypeError(key, Object, value);
};

function checkString(key, value)
{
  if(typeof value != 'string')
    throw ChecktypeError(key, String, value);
};


// Checker functions

function checkType(type, key, value, options)
{
  options = options || {};

  if(value != undefined)
  {
    if(options.isArray)
      return checkArray(type, key, value);

    var checker = checkType[type];
    if(checker) return checker(key, value);

    console.warn("Could not check "+key+", unknown type "+type);
//    throw TypeError("Could not check "+key+", unknown type "+type);
  }

  else if(options.required)
    throw SyntaxError(key+" param is required");

};

function checkParams(params, scheme, class_name)
{
  var result = {};

  // check MediaObject params
  for(var key in scheme)
  {
    var value = params[key];

    var s = scheme[key];

    var options = {required: s.required, isArray: s.isList};

    checkType(s.type, key, value, options);

    if(value == undefined) continue;

    result[key] = value;
    delete params[key];
  };

  if(Object.keys(params).length)
    console.warn('Unused params for '+class_name+':', params);

  return result;
};

function checkMethodParams(callparams, method_params)
{
  var result = {};

  var index=0, param;
  for(; param=method_params[index]; index++)
  {
    var key = param.name;
    var value = callparams[index];

    var options = {required: param.required, isArray: param.isList};

    checkType(param.type, key, value, options);

    result[key] = value;
  }

  var params = callparams.slice(index);
  if(params.length)
    console.warning('Unused params:', params);

  return result;
};


module.exports = checkType;

checkType.checkParams    = checkParams;
checkType.ChecktypeError = ChecktypeError;


// Basic types

checkType.boolean = checkBoolean;
checkType.double  = checkNumber;
checkType.float   = checkNumber;
checkType.int     = checkInteger;
checkType.Object  = checkObject;
checkType.String  = checkString;

},{}],8:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}]},{},[6]);