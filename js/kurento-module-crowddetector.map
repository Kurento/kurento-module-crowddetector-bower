{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../lib/browser.js","../lib/CrowdDetectorFilter.js","../lib/complexTypes/index.js","../lib/complexTypes/RegionOfInterest.js","../lib/complexTypes/RegionOfInterestConfig.js","../lib/complexTypes/RelativePoint.js"],"names":["require","noop","error","result","console","trace","CrowdDetectorFilter","super_","call","this","checkCrowdDetectorFilter","key","value","ChecktypeError","inherits","kurentoClient","disguise","checkType","Transaction","TransactionsManager","Filter","register","abstracts","prototype","getProcessingWidth","callback","transaction","arguments","Array","shift","apply","undefined","usePromise","length","bind","_invoke","setProcessingWidth","processingWidth","params","constructorParams","mediaPipeline","type","required","rois","isArray","events","concat","module","exports","check","RegionOfInterest","RegionOfInterestConfig","RelativePoint","regionOfInterestDict","Object","defineProperties","points","writable","enumerable","regionOfInterestConfig","id","checkRegionOfInterest","ComplexType","complexTypes","__module__","__type__","regionOfInterestConfigDict","occupancyLevelMin","occupancyLevelMed","occupancyLevelMax","occupancyNumFramesToEvent","fluidityLevelMin","fluidityLevelMed","fluidityLevelMax","fluidityNumFramesToEvent","sendOpticalFlowEvent","opticalFlowNumFramesToEvent","opticalFlowNumFramesToReset","opticalFlowAngleOffset","checkRegionOfInterestConfig","relativePointDict","x","y","checkRelativePoint"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Loader for the kurento-module-crowddetector package on the browser\n */\n\nrequire('.');\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar disguise = kurentoClient.disguise;\n\nvar checkType      = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\n\nvar Transaction = kurentoClient.TransactionsManager.Transaction;\n\nvar Filter = kurentoClient.register.abstracts.Filter;\n\n\nfunction noop(error, result) {\n  if (error) console.trace(error);\n\n  return result\n};\n\n\n/**\n * Create a {@link module:crowddetector.CrowdDetectorFilter CrowdDetectorFilter}\n *\n * @classdesc\n *  Filter that detects people agglomeration in video streams\n *\n * @extends module:core/abstracts.Filter\n *\n * @constructor module:crowddetector.CrowdDetectorFilter\n *\n * @fires {@link module:crowddetector#event:CrowdDetectorDirection CrowdDetectorDirection}\n * @fires {@link module:crowddetector#event:CrowdDetectorFluidity CrowdDetectorFluidity}\n * @fires {@link module:crowddetector#event:CrowdDetectorOccupancy CrowdDetectorOccupancy}\n */\nfunction CrowdDetectorFilter(){\n  CrowdDetectorFilter.super_.call(this);\n};\ninherits(CrowdDetectorFilter, Filter);\n\n\n//\n// Public properties\n//\n\n/**\n * The processing image will be resized to this width (in pixels)\n *\n * @alias module:crowddetector.CrowdDetectorFilter#getProcessingWidth\n *\n * @param {module:crowddetector.CrowdDetectorFilter~getProcessingWidthCallback} [callback]\n *\n * @return {external:Promise}\n */\nCrowdDetectorFilter.prototype.getProcessingWidth = function(callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  var usePromise = false;\n  \n  if (callback == undefined) {\n    usePromise = true;\n  }\n  \n  if(!arguments.length) callback = undefined;\n\n  callback = (callback || noop).bind(this)\n\n  return disguise(this._invoke(transaction, 'getProcessingWidth', callback), this)\n};\n/**\n * @callback module:crowddetector.CrowdDetectorFilter~getProcessingWidthCallback\n * @param {external:Error} error\n * @param {external:Integer} result\n */\n\n/**\n * The processing image will be resized to this width (in pixels)\n *\n * @alias module:crowddetector.CrowdDetectorFilter#setProcessingWidth\n *\n * @param {external:Integer} processingWidth\n * @param {module:crowddetector.CrowdDetectorFilter~setProcessingWidthCallback} [callback]\n *\n * @return {external:Promise}\n */\nCrowdDetectorFilter.prototype.setProcessingWidth = function(processingWidth, callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  //  \n  // checkType('int', 'processingWidth', processingWidth, {required: true});\n  //  \n\n  var params = {\n    processingWidth: processingWidth\n  };\n\n  callback = (callback || noop).bind(this)\n\n  return disguise(this._invoke(transaction, 'setProcessingWidth', params, callback), this)\n};\n/**\n * @callback module:crowddetector.CrowdDetectorFilter~setProcessingWidthCallback\n * @param {external:Error} error\n */\n\n\n/**\n * @alias module:crowddetector.CrowdDetectorFilter.constructorParams\n *\n * @property {module:core.MediaPipeline} mediaPipeline\n *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter \n *  belongs\n *\n * @property {module:crowddetector/complexTypes.RegionOfInterest}[] rois\n *  Regions of interest for the filter\n */\nCrowdDetectorFilter.constructorParams = {\n  mediaPipeline: {\n    type: 'kurento.MediaPipeline',\n    required: true\n  },\n  rois: {\n    type: 'crowddetector.RegionOfInterest',\n    isArray: true,\n    required: true\n  }\n};\n\n/**\n * @alias module:crowddetector.CrowdDetectorFilter.events\n *\n * @extends module:core/abstracts.Filter.events\n */\nCrowdDetectorFilter.events = Filter.events.concat(['CrowdDetectorDirection', 'CrowdDetectorFluidity', 'CrowdDetectorOccupancy']);\n\n\n/**\n * Checker for {@link module:crowddetector.CrowdDetectorFilter}\n *\n * @memberof module:crowddetector\n *\n * @param {external:String} key\n * @param {module:crowddetector.CrowdDetectorFilter} value\n */\nfunction checkCrowdDetectorFilter(key, value)\n{\n  if(!(value instanceof CrowdDetectorFilter))\n    throw ChecktypeError(key, CrowdDetectorFilter, value);\n};\n\n\nmodule.exports = CrowdDetectorFilter;\n\nCrowdDetectorFilter.check = checkCrowdDetectorFilter;\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Media API for the Kurento Web SDK\n *\n * @module crowddetector/complexTypes\n *\n * @copyright 2013-2015 Kurento (http://kurento.org/)\n * @license ALv2\n */\n\nvar RegionOfInterest = require('./RegionOfInterest');\nvar RegionOfInterestConfig = require('./RegionOfInterestConfig');\nvar RelativePoint = require('./RelativePoint');\n\n\nexports.RegionOfInterest = RegionOfInterest;\nexports.RegionOfInterestConfig = RegionOfInterestConfig;\nexports.RelativePoint = RelativePoint;\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar checkType = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\nvar ComplexType = kurentoClient.register.complexTypes.ComplexType;\n\n\n/**\n * Region of interest for some events in a video processing filter\n *\n * @constructor module:crowddetector/complexTypes.RegionOfInterest\n *\n * @property {module:crowddetector/complexTypes.RelativePoint} points\n *  list of points delimiting the region of interest\n * @property {module:crowddetector/complexTypes.RegionOfInterestConfig} regionOfInterestConfig\n *  data structure for configuration of CrowdDetector regions of interest\n * @property {external:String} id\n *  identifier of the region of interest. The string used for the id must begin \n *   with a letter followed by an alphanumeric character included (/-_.:+)\n */\nfunction RegionOfInterest(regionOfInterestDict){\n  if(!(this instanceof RegionOfInterest))\n    return new RegionOfInterest(regionOfInterestDict)\n\n  regionOfInterestDict = regionOfInterestDict || {}\n\n  // Check regionOfInterestDict has the required fields\n  // \n  // checkType('RelativePoint', 'regionOfInterestDict.points', regionOfInterestDict.points, {isArray: true, required: true});\n  //  \n  // checkType('RegionOfInterestConfig', 'regionOfInterestDict.regionOfInterestConfig', regionOfInterestDict.regionOfInterestConfig, {required: true});\n  //  \n  // checkType('String', 'regionOfInterestDict.id', regionOfInterestDict.id, {required: true});\n  //  \n\n  // Init parent class\n  RegionOfInterest.super_.call(this, regionOfInterestDict)\n\n  // Set object properties\n  Object.defineProperties(this, {\n    points: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestDict.points\n    },\n    regionOfInterestConfig: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestDict.regionOfInterestConfig\n    },\n    id: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestDict.id\n    }\n  })\n}\ninherits(RegionOfInterest, ComplexType)\n\n// Private identifiers to allow re-construction of the complexType on the server\n// They need to be enumerable so JSON.stringify() can access to them\nObject.defineProperties(RegionOfInterest.prototype, {\n  __module__: {\n    enumerable: true,\n    value: \"crowddetector\"\n  },\n  __type__: {\n    enumerable: true,\n    value: \"RegionOfInterest\"\n  }\n})\n\n/**\n * Checker for {@link module:crowddetector/complexTypes.RegionOfInterest}\n *\n * @memberof module:crowddetector/complexTypes\n *\n * @param {external:String} key\n * @param {module:crowddetector/complexTypes.RegionOfInterest} value\n */\nfunction checkRegionOfInterest(key, value)\n{\n  if(!(value instanceof RegionOfInterest))\n    throw ChecktypeError(key, RegionOfInterest, value);\n};\n\n\nmodule.exports = RegionOfInterest;\n\nRegionOfInterest.check = checkRegionOfInterest;\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar checkType = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\nvar ComplexType = kurentoClient.register.complexTypes.ComplexType;\n\n\n/**\n * data structure for configuration of CrowdDetector regions of interest\n *\n * @constructor module:crowddetector/complexTypes.RegionOfInterestConfig\n *\n * @property {external:Integer} occupancyLevelMin\n *  minimun occupancy percentage in the ROI to send occupancy events\n * @property {external:Integer} occupancyLevelMed\n *  send occupancy level = 1 if the occupancy percentage is between \n *  occupancy_level_min and this level\n * @property {external:Integer} occupancyLevelMax\n *  send occupancy level = 2 if the occupancy percentage is between \n *  occupancy_level_med and this level,\n *  and send occupancy level = 3 if the occupancy percentage is between this \n *  level and 100\n * @property {external:Integer} occupancyNumFramesToEvent\n *  number of consecutive frames that a new occupancy level has to be detected \n *  to recognize it as a occupancy level change.\n *  A new occupancy event will be send\n * @property {external:Integer} fluidityLevelMin\n *  minimun fluidity percentage in the ROI to send fluidity events\n * @property {external:Integer} fluidityLevelMed\n *  send fluidity level = 1 if the fluidity percentage is between \n *  fluidity_level_min and this level\n * @property {external:Integer} fluidityLevelMax\n *  send fluidity level = 2 if the fluidity percentage is between \n *  fluidity_level_med and this level,\n *   and send fluidity level = 3 if the fluidity percentage is between this \n *   level and 100\n * @property {external:Integer} fluidityNumFramesToEvent\n *  number of consecutive frames that a new fluidity level has to be detected to\n *   A new fluidity event will be send\n * @property {external:Boolean} sendOpticalFlowEvent\n *  Enable/disable the movement direction detection into the ROI\n * @property {external:Integer} opticalFlowNumFramesToEvent\n *  number of consecutive frames that a new direction of movement has to be \n *  detected to recognize a new movement direction. \n *   A new direction event will be send\n * @property {external:Integer} opticalFlowNumFramesToReset\n *  number of consecutive frames in order to reset the counter of repeated \n *  directions\n * @property {external:Integer} opticalFlowAngleOffset\n *  Direction of the movement. The angle could have four different values: \n *   left (0), up (90), right (180) and down (270). This cartesian axis could be\n */\nfunction RegionOfInterestConfig(regionOfInterestConfigDict){\n  if(!(this instanceof RegionOfInterestConfig))\n    return new RegionOfInterestConfig(regionOfInterestConfigDict)\n\n  regionOfInterestConfigDict = regionOfInterestConfigDict || {}\n\n  // Check regionOfInterestConfigDict has the required fields\n  // \n  // checkType('int', 'regionOfInterestConfigDict.occupancyLevelMin', regionOfInterestConfigDict.occupancyLevelMin);\n  //  \n  // checkType('int', 'regionOfInterestConfigDict.occupancyLevelMed', regionOfInterestConfigDict.occupancyLevelMed);\n  //  \n  // checkType('int', 'regionOfInterestConfigDict.occupancyLevelMax', regionOfInterestConfigDict.occupancyLevelMax);\n  //  \n  // checkType('int', 'regionOfInterestConfigDict.occupancyNumFramesToEvent', regionOfInterestConfigDict.occupancyNumFramesToEvent);\n  //  \n  // checkType('int', 'regionOfInterestConfigDict.fluidityLevelMin', regionOfInterestConfigDict.fluidityLevelMin);\n  //  \n  // checkType('int', 'regionOfInterestConfigDict.fluidityLevelMed', regionOfInterestConfigDict.fluidityLevelMed);\n  //  \n  // checkType('int', 'regionOfInterestConfigDict.fluidityLevelMax', regionOfInterestConfigDict.fluidityLevelMax);\n  //  \n  // checkType('int', 'regionOfInterestConfigDict.fluidityNumFramesToEvent', regionOfInterestConfigDict.fluidityNumFramesToEvent);\n  //  \n  // checkType('boolean', 'regionOfInterestConfigDict.sendOpticalFlowEvent', regionOfInterestConfigDict.sendOpticalFlowEvent);\n  //  \n  // checkType('int', 'regionOfInterestConfigDict.opticalFlowNumFramesToEvent', regionOfInterestConfigDict.opticalFlowNumFramesToEvent);\n  //  \n  // checkType('int', 'regionOfInterestConfigDict.opticalFlowNumFramesToReset', regionOfInterestConfigDict.opticalFlowNumFramesToReset);\n  //  \n  // checkType('int', 'regionOfInterestConfigDict.opticalFlowAngleOffset', regionOfInterestConfigDict.opticalFlowAngleOffset);\n  //  \n\n  // Init parent class\n  RegionOfInterestConfig.super_.call(this, regionOfInterestConfigDict)\n\n  // Set object properties\n  Object.defineProperties(this, {\n    occupancyLevelMin: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.occupancyLevelMin\n    },\n    occupancyLevelMed: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.occupancyLevelMed\n    },\n    occupancyLevelMax: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.occupancyLevelMax\n    },\n    occupancyNumFramesToEvent: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.occupancyNumFramesToEvent\n    },\n    fluidityLevelMin: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.fluidityLevelMin\n    },\n    fluidityLevelMed: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.fluidityLevelMed\n    },\n    fluidityLevelMax: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.fluidityLevelMax\n    },\n    fluidityNumFramesToEvent: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.fluidityNumFramesToEvent\n    },\n    sendOpticalFlowEvent: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.sendOpticalFlowEvent\n    },\n    opticalFlowNumFramesToEvent: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.opticalFlowNumFramesToEvent\n    },\n    opticalFlowNumFramesToReset: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.opticalFlowNumFramesToReset\n    },\n    opticalFlowAngleOffset: {\n      writable: true,\n      enumerable: true,\n      value: regionOfInterestConfigDict.opticalFlowAngleOffset\n    }\n  })\n}\ninherits(RegionOfInterestConfig, ComplexType)\n\n// Private identifiers to allow re-construction of the complexType on the server\n// They need to be enumerable so JSON.stringify() can access to them\nObject.defineProperties(RegionOfInterestConfig.prototype, {\n  __module__: {\n    enumerable: true,\n    value: \"crowddetector\"\n  },\n  __type__: {\n    enumerable: true,\n    value: \"RegionOfInterestConfig\"\n  }\n})\n\n/**\n * Checker for {@link module:crowddetector/complexTypes.RegionOfInterestConfig}\n *\n * @memberof module:crowddetector/complexTypes\n *\n * @param {external:String} key\n * @param {module:crowddetector/complexTypes.RegionOfInterestConfig} value\n */\nfunction checkRegionOfInterestConfig(key, value)\n{\n  if(!(value instanceof RegionOfInterestConfig))\n    throw ChecktypeError(key, RegionOfInterestConfig, value);\n};\n\n\nmodule.exports = RegionOfInterestConfig;\n\nRegionOfInterestConfig.check = checkRegionOfInterestConfig;\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar checkType = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\nvar ComplexType = kurentoClient.register.complexTypes.ComplexType;\n\n\n/**\n * Relative points in a physical screen, values are a percentage relative to the\n *\n * @constructor module:crowddetector/complexTypes.RelativePoint\n *\n * @property {external:Number} x\n *  Percentage relative to the image width to calculate the X coordinate of the \n *  point [0..1]\n * @property {external:Number} y\n *  Percentage relative to the image height to calculate the Y coordinate of the\n */\nfunction RelativePoint(relativePointDict){\n  if(!(this instanceof RelativePoint))\n    return new RelativePoint(relativePointDict)\n\n  relativePointDict = relativePointDict || {}\n\n  // Check relativePointDict has the required fields\n  // \n  // checkType('float', 'relativePointDict.x', relativePointDict.x, {required: true});\n  //  \n  // checkType('float', 'relativePointDict.y', relativePointDict.y, {required: true});\n  //  \n\n  // Init parent class\n  RelativePoint.super_.call(this, relativePointDict)\n\n  // Set object properties\n  Object.defineProperties(this, {\n    x: {\n      writable: true,\n      enumerable: true,\n      value: relativePointDict.x\n    },\n    y: {\n      writable: true,\n      enumerable: true,\n      value: relativePointDict.y\n    }\n  })\n}\ninherits(RelativePoint, ComplexType)\n\n// Private identifiers to allow re-construction of the complexType on the server\n// They need to be enumerable so JSON.stringify() can access to them\nObject.defineProperties(RelativePoint.prototype, {\n  __module__: {\n    enumerable: true,\n    value: \"crowddetector\"\n  },\n  __type__: {\n    enumerable: true,\n    value: \"RelativePoint\"\n  }\n})\n\n/**\n * Checker for {@link module:crowddetector/complexTypes.RelativePoint}\n *\n * @memberof module:crowddetector/complexTypes\n *\n * @param {external:String} key\n * @param {module:crowddetector/complexTypes.RelativePoint} value\n */\nfunction checkRelativePoint(key, value)\n{\n  if(!(value instanceof RelativePoint))\n    throw ChecktypeError(key, RelativePoint, value);\n};\n\n\nmodule.exports = RelativePoint;\n\nRelativePoint.check = checkRelativePoint;\n"]}